<?php
/**
 * @autor Rixio Danilo Iguarán Chourio.
 * @cédula-profesional 12196442
 * @correo-eletrónico atencion.clientes@obringolfo.com
 * @denominacion OBRAS INFORMÁTICAS DEL GOLFO
 * @empresa OBRINGOLFO S.A.S. DE C.V.
 * @proyecto  goPAC.
 * @copyright 2021
 */
use setasign\Fpdi\Fpdi;
use setasign\Fpdi\PdfReader;

class BecasControlador extends ControladorBase{
    public $conectar;
    public $adapter;
    /** ****************************************************** **/
    public function __construct() {
        try {

            parent::__construct();
            $this->conectar = new Conectar();
            $this->adapter  = $this->conectar->conexion();

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function index(){
        try {

            //$this->view("_header_app", null);
            //$this->view("becas/registro_paso_01", null);
            //$this->view("_footer_app", null);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function next_step(){
        try {

            auditar(print_r($_POST, true));

            if(isset($_POST['step']) && ($_POST['step'] != '')){ //El usuario está en un paso
                switch ($_POST['step']) {
                    case 0: //Presentación
                            $this->view("_header_login", null);
                            $this->view("becas/registro_paso_01", null);
                            $this->view("_footer_login", null);
                        break;

                    case 1: //Busqueda del alumno
                            //Comprobando datos del formulario
                            if(isset($_POST['txt_MATRICULA']) && ($_POST['txt_MATRICULA'] != '')) {
                                $txt_MATRICULA = $_POST['txt_MATRICULA'];
                                if(isset($_POST['txt_PASSW1']) && ($_POST['txt_PASSW1'] != '')) {
                                    $txt_PASSW1 = $_POST['txt_PASSW1'];
                                }else{
                                    $this->view("_header_login", null);
                                    $this->view("becas/registro_paso_01", array("error" => "400", "error_msg" => "Tú confirmación de acceso no es correcta.<br>Debes revisar."));
                                    $this->view("_footer_login", null);
                                }
                            }else{
                                $this->view("_header_login", null);
                                $this->view("becas/registro_paso_01", array("error" => "404", "error_msg" => "Tú matricula no es correcta.<br>Debes revisar."));
                                $this->view("_footer_login", null);
                            }

                            auditar($txt_MATRICULA." | ".$txt_PASSW1);

                            $beneficiario = new Becas_beneficiarios($this->adapter); //Preparo la conexion con el modelo en la db
                            $MyBeneficiario = $beneficiario->getBy('matricula', $txt_MATRICULA); //busco la matricula en la db
                            if(!empty($MyBeneficiario)){ //tenemos un beneficiario valido
                                if($MyBeneficiario[0]->calendarizo == 0){ //El beneficiario no ha programado su calendario

                                    $pwd_peppered = hash_hmac("sha256", $txt_PASSW1, SECURITY_PEPPER);
                                    $pwd_hashed = $MyBeneficiario[0]->secreto;
                                    if (password_verify($pwd_peppered, $pwd_hashed)) {
                                        //Cargamos los datos del comedor
                                        $comedor = new Becas_comedores($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyComedor = $comedor->getBy('id', $MyBeneficiario[0]->id_comedor); //busco el comedor en la db
                                        //Cargamos los datos del periodo
                                        $periodo = new Becas_periodos($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyPeriodo = $periodo->getBy('estado', "A"); //busco el comedor en la db
                                        //Cargamos los datos de las becas autorizadas por mes
                                        $b_mes = new Becas_mes($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyB_Mes = $b_mes->getAll(); //busco el comedor en la db
                                        //Cargamos los datos de los dias festivos
                                        $festivos = new Becas_festivos($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyFestivos = $festivos->getAll(); //busco todos los días en la db

                                        //Generamos el arreglo de datos
                                        $Becario = array(
                                            "Matricula" => $MyBeneficiario[0]->matricula,
                                            "Nombre" => $MyBeneficiario[0]->nombre,
                                            "NAlimentos" => $MyBeneficiario[0]->n_alimentos,
                                            "Comedor" => $MyComedor[0]->nombre,
                                            "Periodo_Id" => $MyPeriodo[0]->id,
                                            "Periodo_I" => $MyPeriodo[0]->f_inicio,
                                            "Periodo_F" => $MyPeriodo[0]->f_final,
                                            "Ruta_Credencial" => "/docs/becados/credencial.jpg" //"Ruta_Credencial" => "/docs/becados/".$MyBeneficiario[0]->matricula."/credencial.jpg"
                                        );
                                        //Cargamos la vista y enviamos el arreglo de datos
                                        $this->view("_header_login", null);
                                        $this->view("becas/registro_paso_02", array(
                                            "Becario" => $Becario,
                                            "B_Mes" => $MyB_Mes,
                                            "dFestivos" => $MyFestivos
                                        ));
                                        $this->view("_footer_login", null);

                                    }else{
                                        //Anunciamos contraseña erronea
                                        $this->view("_header_login", null);
                                        $this->view("becas/registro_paso_01", array("error" => "404", "error_msg" => "Tu contraseña de acceso no es válida.<br>Debes revisar."));
                                        $this->view("_footer_login", null);
                                    }

                                }else{ //Ya está calendarizado
                                    $this->view("_header_login", null);
                                    $this->view("becas/registro_paso_01", array("error" => "403", "error_msg" => "Ya completaste la calendarización de tus alimentos.<br>No puedes moficar tu calendario de comidas."));
                                    $this->view("_footer_login", null);
                                }
                            }else{
                                $this->view("_header_login", null);
                                $this->view("becas/registro_paso_01", array("error" => "404", "error_msg" => "Tu matricula no está registrada como becario.<br>Debes revisar."));
                                $this->view("_footer_login", null);
                            }

                        break;

                    case 2: //Confirmación de datos
                        //Comprobando datos del formulario
                        if(isset($_POST['txt_MATRICULA']) && ($_POST['txt_MATRICULA'] != '')) {
                            $txt_MATRICULA = $_POST['txt_MATRICULA'];
                            require_once(ROOT_DIR . 'app/librerias/php/fpdf/fpdf.php');
                            require_once(ROOT_DIR . 'app/librerias/php/fpdi/autoload.php');
                            //require_once(ROOT_DIR . "app/librerias/php/tcpdf/tcpdf.php");

                            $beneficiario = new Becas_beneficiarios($this->adapter); //Preparo la conexion con el modelo en la db
                            $MyBeneficiario = $beneficiario->getBy('matricula', $txt_MATRICULA); //busco la matricula en la db
                            if(!empty($MyBeneficiario)){ //tenemos un beneficiario valido
                                if($MyBeneficiario[0]->calendarizo == 1){ //El beneficiario programó su calendario

                                    //Generar el PDF, con el calendario
                                    $pdf = new Fpdi();

                                    $pageCount = $pdf->setSourceFile(ROOT_DIR . 'docs/becados/pdf_modelo.pdf');
                                    $pageId = $pdf->importPage(1, PdfReader\PageBoundaries::MEDIA_BOX);

                                    $pdf->addPage();
                                    $pdf->useImportedPage($pageId, 0, 0, 200);
                                    $pdf->SetMargins(30, 30, 30);
                                    //Asignando la fuente y color
                                    $pdf->SetFont('Helvetica', '','8');
                                    $Ytop = 57;

                                    $pdf->SetTextColor(0, 0, 0);
                                    ob_get_clean();
                                    //Escribiendo la MATRICULA DEL BECARIO
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Tú matricula: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($MyBeneficiario[0]->matricula));

                                    //Escribiendo el nombre del becario
                                    $Ytop += 5;
                                    $pdf->SetFont('Helvetica', '','8');
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Tú nombre: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($MyBeneficiario[0]->nombre));

                                    //Escribiendo el apellido MATERNO
                                    $Ytop += 5;
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Alimentos programados: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($MyBeneficiario[0]->n_alimentos." Alimentos"));

                                    //Escribiendo el NOMBRE
                                    $Ytop += 5;
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Área que gestiona tu beca: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($MyBeneficiario[0]->dependencia));

                                    //Escribiendo el CORREO
                                    $Ytop += 5;
                                    $pdf->SetFont('Helvetica', '','8');
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Tú correo de contacto: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($MyBeneficiario[0]->correo));

                                    //Escribiendo el TELEFONO
                                    $nComedor = "";
                                    switch ($MyBeneficiario[0]->id_comedor) {
                                        case "1": //INGENIERÍA
                                            $nComedor = "Comedor INGENIERÍA";
                                        break;
                                        case "2": //HUMANIDADES
                                            $nComedor = "Comedor HUMANIDADES";
                                        break;
                                        case "3": //BIOLOGÍA
                                            $nComedor = "Comedor KOMALLI";
                                        break;
                                        case "4": //ARTES
                                            $nComedor = "Comedor UNIDAD DE ARTES";
                                        break;
                                        case "5": //ECONOMIA
                                            $nComedor = "Comedor AJUIYAK TLAKUALLI";
                                        break;
                                        case "6": //TUXPAN
                                            $nComedor = "Comedor TUXPAN";
                                        break;
                                    }
                                    $Ytop += 5;
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(30, utf8_decode("Comedor para entrega de alimentos: "));
                                    $pdf->SetXY(80, $Ytop);
                                    $pdf->Write(30, utf8_decode($nComedor));

                                    auditar("Preparamos los desayunos en PDF");
                                        try {
                                        $desayunos = new Becas_programacion($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyDesayunos = $desayunos->execSQL("SELECT * FROM becas_programacion WHERE id_matricula='".$txt_MATRICULA."' AND tipo_alimento='D' AND estado='D' ORDER BY fecha ASC"); //busco la matricula en la db
                                        $FDesayunos = "";
                                        if(!empty($MyDesayunos)){ //tenemos la programación
                                            foreach($MyDesayunos as $xDesayuno){
                                                $FDesayunos .= fecha_DMA($xDesayuno->fecha)." | ";
                                            }
                                        }else{
                                            $FDesayunos = "No es posible acceder a la programación de tus desayunos en este momento.";
                                        }
                                        //$FDesayunos = "00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | ";

                                    } catch (Exception $exception) {
                                        auditar($exception->getMessage());
                                    }
                                    //Escribiendo los días de DESAYUNO
                                    $Ytop += 40;
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(5, utf8_decode($FDesayunos));

                                    auditar("Preparamos las comidas en PDF");
                                    try {
                                        $comidas = new Becas_programacion($this->adapter); //Preparo la conexion con el modelo en la db
                                        $MyComidas = $comidas->execSQL("SELECT * FROM becas_programacion WHERE id_matricula='".$txt_MATRICULA."' AND tipo_alimento='C' AND estado='D' ORDER BY fecha ASC"); //busco la matricula en la db
                                        $FComidas = "";
                                        if(!empty($MyComidas)){ //tenemos la programación
                                            foreach($MyComidas as $xComida){
                                                $FComidas .= fecha_DMA($xComida->fecha)." | ";
                                            }
                                        }else{
                                            $FComidas = "No es posible acceder a la programación de tus comidas en este momento.";
                                        }
                                        //$FComidas = "00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | 00/00/0000 | ";

                                    } catch (Exception $exception) {
                                        auditar($exception->getMessage());
                                    }


                                    //Escribiendo los días de COMIDAS
                                    $Ytop += 60;
                                    $pdf->SetXY(30, $Ytop);
                                    $pdf->Write(5, utf8_decode($FComidas));

                                    $pdf_path = ROOT_DIR . 'docs/becados/' . strtoupper($txt_MATRICULA);
                                    auditar("Verificamos el directorio para ".$pdf_path);
                                    // Checking whether file exists or not
                                    if (!file_exists($pdf_path)) {
                                        // Create a new file or direcotry
                                        mkdir($pdf_path, 0777, true);
                                    }

                                    $pdf->Output($pdf_path . '/'.strtoupper($txt_MATRICULA).'_calendario.pdf', 'F');

                                }
                            }

                            $this->view("_header_login", null);
                            $this->view("becas/registro_paso_03", array("PDF_file" => '/docs/becados/'.strtoupper($txt_MATRICULA).'/'.strtoupper($txt_MATRICULA).'_calendario.pdf'));
                            $this->view("_footer_login", null);
                        }else{
                            $this->view("_header_login", null);
                            $this->view("becas/registro_paso_01", array("error" => "404", "error_msg" => "Tú matricula no es correcta.<br>Debes revisar."));
                            $this->view("_footer_login", null);
                        }
                        break;
                    
                    case 3: //Dirección
                        break;
        
                }                
            }

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }

    /** ****************************************************** **/
    public function set_Alimento(){
        try {
            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $xRespuesta = array();

            //Comprobando la matricula
            if(isset($_POST["matricula"]) && $_POST["matricula"] != ""){
                //Comprobando el tipo de alimento
                if(isset($_POST["tipo_alimento"]) && $_POST["tipo_alimento"] != ""){
                    //Comprobando la fecha de entrega
                    if(isset($_POST["fecha"]) && $_POST["fecha"] != ""){
                        //Conectamos con el modelo de datos
                        $programacion = new Becas_programacion($this->adapter); //Preparo la conexion con el modelo en la db
                        $programacion->setId_matricula($_POST["matricula"]);
                        $programacion->setTipo_alimento($_POST["tipo_alimento"]);
                        $programacion->setFecha($_POST["fecha"]);
                        $programacion->setEstado("D");
                        $save = $programacion->saveData();
                        if($save){
                            $xRespuesta['code'] = 0;
                        }else{
                            $xRespuesta['code'] = 404;
                        }

                    }else{
                        $xRespuesta['code'] = 404;
                    }
                }else{
                    $xRespuesta['code'] = 404;
                }
            }else{
                $xRespuesta['code'] = 404;
            }

            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }

    /** ****************************************************** **/
    public function set_Calendarizacion(){
        try {
            chkSesion();
            header('Content-Type: application/json; charset=UTF8');
            $xRespuesta = array();

            //Comprobando la matricula
            if(isset($_POST["matricula"]) && $_POST["matricula"] != ""){

                //Registrando la calendarización del benediciario
                $beneficiario = new Becas_beneficiarios($this->adapter); //Preparo la conexion con el modelo en la db
                $beneficiario->setCalendarizo(1);
                $update = $beneficiario->updateBy('matricula', $_POST["matricula"]);
                if($update){
                    $xRespuesta['code'] = 0;
                }else{
                    $xRespuesta['code'] = 404;
                }
            }else{
                $xRespuesta['code'] = 404;
            }

            echo json_encode($xRespuesta);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }



    /** ****************************************************** **/
    /**
     * CONTROL DE INTERFACES PARA EL USUARIO (Carga dinamica de interfaces)
     *  **/
    /** ****************************************************** **/
    public function registro(){
        try {

            $this->view("_header_login", null);
            $this->view("becas/registro_paso_00", null);
            $this->view("_footer_login", null);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }
    /** ****************************************************** **/
    public function aviso_calendario(){
        try {

            $this->view("_header_login", null);
            $this->view("becas/aviso_paso_00", null);
            $this->view("_footer_login", null);

        } catch (Exception $e) {
            mostrar_error($e);
        }
    }

    /** ****************************************************** **/

}
?>
